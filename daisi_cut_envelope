#!/usr/bin/python3

#   calculate_cut_envelope - calculate valid areas of footprints from the DAISI system taking into consideration heading and solar azimuth angles
#   Copyright (C) 2016  Axel Wegener <a.wegener@ifaoe.de>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be ueful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

from shapely.geometry.polygon import Polygon
from shapely.geometry.multipolygon import MultiPolygon
from shapely.wkt import loads, dumps
from shapely.ops import cascaded_union, unary_union
from argparse import ArgumentParser
import psycopg2
from pysolar.solar import get_azimuth
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

precision = 0.000001
min_polygon_size = 1.0
smoothing_buffer = 0.00001


class ImagePair:
    cam1_cut_env = ""
    cam2_cut_env = ""

    def __init__(self, transect, cam1id, cam2id, cam1env, cam2env, solar_azimuth):
        self.trac = transect
        self.cam1_id = cam1id
        self.cam2_id = cam2id
        self.cam1_env = cam1env
        self.cam2_env = cam2env
        self.azimuth = solar_azimuth


def erode(geometry, value):
    return geometry.buffer(-value).buffer(0)


def simplify(multi_poly):
    # remove spikes. TODO: buffer rounds corners
    # hull = multi_poly.convex_hull.buffer(1.0)
    # diff = hull.difference(multi_poly).buffer(0.1).buffer(-0.1)
    # return multi_poly.difference(diff)
    # new_poly = []
    # if multi_poly.geom_type == 'MultiPolygon':
    #     for poly in multi_poly:
    #         if poly.area > min_polygon_size:
    #             new_poly.append(poly)
    #     return MultiPolygon(new_poly).buffer(-precision, cap_style=3, join_style=2).buffer(precision, cap_style=3, join_style=2)
    # else:
    #     return multi_poly.buffer(-smoothing_buffer, cap_style=3, join_style=2).buffer(smoothing_buffer, cap_style=3, join_style=2)
    new_poly = Polygon()
    if multi_poly.geom_type == 'MultiPolygon':
        for poly in multi_poly:
            if poly.area > new_poly.area:
                new_poly = poly
    else:
        new_poly = multi_poly

    return new_poly.buffer(0)

if __name__ == '__main__':

    parser = ArgumentParser(description='Calculate non overlapping envelopes for DAISI images.')
    parser.add_argument('-H', '--host', type=str, default='127.0.0.1', help='Database host (default: 127.0.0.1).')
    parser.add_argument('-d', '--database', type=str, default='daisi', help='Database name (default: DAISI).')
    parser.add_argument('-u', '--user', type=str, default='daisi', help='Database user (default: DAISI).')
    parser.add_argument('-P', '--password', type=str, default='18ifaoe184', help='Database password.')
    parser.add_argument('-p', '--port', type=str, default='5432', help='Database port (default: 5432).')
    parser.add_argument('-o', '--output', type=str, help='Output destination (default: STDOUT)')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbosity')
    parser.add_argument('session', type=str, help='Session')

    args = parser.parse_args()
    session = args.session
    db_host = args.host
    db_name = args.database
    db_user = args.user
    db_password = args.password
    db_port = args.port

    if args.verbose:
        logger.setLevel(logging.DEBUG)

    # initialize database connection
    logger.debug("Connecting to database")
    connection = psycopg2.connect(database=db_name, user=db_user, password=db_password, host=db_host, port=db_port)
    cursor = connection.cursor()

    # get correct utm sector
    logger.debug("Catching UTM Sector from database.")
    cursor.execute("SELECT utm_sector FROM projects WHERE flight_id=%s", (session,))
    row = cursor.fetchone()
    utm_sector = row[0]

    # get image data
    logger.debug("Getting gps and geo data from database.")
    image_pairs = {}
    cursor.execute(
        "SELECT sync_id, gps_trc, cam1_id, cam2_id, ST_AsText(ST_SnapToGrid(ST_Multi(geo_rc_sb),0.0000001)), ST_AsText(ST_SnapToGrid(ST_Multi(geo_rc_bb),0.0000001)), gps_tm + gps_dt AT TIME ZONE 'MET', lon, lat, head_stabi FROM sync_utm{0} "
        "WHERE session=%s ORDER BY sync_id".format(utm_sector),
        (session,))
    for record in cursor:
        (sync_id, trac, cam1_id, cam2_id, cam1_env, cam2_env, timestamp, lon, lat, heading) = record
        solar_direction = (heading - (360 + 180 - get_azimuth(lat, lon, timestamp))) % 360
        image_pairs[sync_id] = ImagePair(trac, cam1_id, cam2_id, loads(cam1_env), loads(cam2_env), solar_direction)

    # calculate envelopes
    logger.debug("Calculating cut envelopes")
    current = 0
    total = len(image_pairs)
    for sync_id in image_pairs:
        current += 1
        logger.debug("Processing pair {0}/{1}: {2}".format(current, total, sync_id))
        solar_direction = image_pairs[sync_id].azimuth
        # case NE, cut north (next sync_id) and east
        cam1_env = image_pairs[sync_id].cam1_env
        cam2_env = image_pairs[sync_id].cam2_env
        if 0 <= solar_direction < 90:
            try:
                ne_env = image_pairs[sync_id + 1].cam1_env
                nw_env = image_pairs[sync_id + 1].cam2_env
                # cut cam 1
                image_pairs[sync_id].cam1_env = cam1_env.difference(cascaded_union([cam2_env, ne_env, nw_env]))
                # cut cam 2
                image_pairs[sync_id].cam2_env = cam2_env.difference(cascaded_union([ne_env, nw_env]))
            except KeyError:
                logger.debug("sync_id {0} not found. Assuming last image.".format(sync_id + 1))
                image_pairs[sync_id].cam1_env = cam1_env.difference(cam2_env)

        # case SE cut south and east
        elif 90 <= solar_direction < 180:
            try:
                se_env = image_pairs[sync_id - 1].cam1_env
                sw_env = image_pairs[sync_id - 1].cam2_env
                # cut cam 1
                image_pairs[sync_id].cam1_env = cam1_env.difference(cascaded_union([cam2_env, se_env, sw_env]))
                # cut cam 2
                image_pairs[sync_id].cam2_env = cam2_env.difference(cascaded_union([se_env, sw_env]))
            except KeyError:
                logger.debug("sync_id {0} not found. Assuming first image.".format(sync_id - 1))
                image_pairs[sync_id].cam1_env = cam1_env.difference(cam2_env)

        # case SW cut south and west
        elif 180 <= solar_direction < 270:
            try:
                se_env = image_pairs[sync_id - 1].cam1_env
                sw_env = image_pairs[sync_id - 1].cam2_env
                # cut cam 1
                image_pairs[sync_id].cam1_env = cam1_env.difference(cascaded_union([se_env, sw_env]))
                # cut cam 2
                image_pairs[sync_id].cam2_env = cam2_env.difference(cascaded_union([cam1_env, se_env, sw_env]))
            except KeyError:
                logger.debug("sync_id {0} not found. Assuming first image.".format(sync_id - 1))
                image_pairs[sync_id].cam2_env = cam2_env.difference(cam1_env)

        # case NW cut north and west
        elif 270 <= solar_direction < 360:
            try:
                ne_env = image_pairs[sync_id + 1].cam1_env
                nw_env = image_pairs[sync_id + 1].cam2_env
                # cut cam 1
                image_pairs[sync_id].cam1_env = cam1_env.difference(cascaded_union([ne_env, nw_env]))
                # cut cam 2
                image_pairs[sync_id].cam2_env = cam2_env.difference(cascaded_union([cam1_env, ne_env, nw_env]))
            except KeyError:
                logger.debug("sync_id {0} not found. Assuming last image.".format(sync_id + 1))
                image_pairs[sync_id].cam2_env = cam2_env.difference(cam1_env)
        else:
            logger.warn("Unknown handling for azimuth value {0}. Images with sync_id {1} won't be processed".format(solar_direction, sync_id, ))
        image_pairs[sync_id].cam1_env = simplify(image_pairs[sync_id].cam1_env)
        image_pairs[sync_id].cam2_env = simplify(image_pairs[sync_id].cam2_env)

    # cut envelope again in case sun position has sufficiently changed
    for sync_id in image_pairs:
        cam1_env = image_pairs[sync_id].cam1_env
        cam2_env = image_pairs[sync_id].cam2_env
        try:
            ne_env = image_pairs[sync_id + 1].cam1_env.buffer(precision)
            nw_env = image_pairs[sync_id + 1].cam2_env.buffer(precision)
            union = unary_union([ne_env, nw_env]).buffer(-precision)

            if cam1_env.intersects(union):
                # cut cam 1
                image_pairs[sync_id].cam1_env = cam1_env.difference(union)
            if cam2_env.intersects(union):
                # cut cam 2
                image_pairs[sync_id].cam2_env = cam2_env.difference(union)
        except KeyError:
            logger.debug("Sanity cut: sync_id {0} not found. Assuming last image.".format(sync_id + 1))

    # create output
    # to stdout
    logger.debug("Creating output.")
    logger.debug("Writing to stdout.")

    index = 1
    for sync_id, rec in image_pairs.items():
        if index % 10 == 0:
            project_list = '{{"{0}","{0}-10p"}}'.format(session)
        else:
            project_list = '{{"{0}"}}'.format(session)

        logger.debug("Writing {0}".format(sync_id))
        print("INSERT INTO images (session, sync_id, camera, image, transect, cut_envelope, analysed, is_valid, project_list) VALUES")
        print("('{0}', {1}, '{2}', '{3}', {4}, ST_Transform(ST_Multi(ST_GeomFromText('{5}', 326{6})),4326), TRUE, TRUE, '{7}'),"
              .format(session, sync_id, 1, rec.cam1_id, rec.trac, dumps(erode(rec.cam1_env, precision)), utm_sector, project_list))
        print("('{0}', {1}, '{2}', '{3}', {4}, ST_Transform(ST_Multi(ST_GeomFromText('{5}', 326{6})),4326), TRUE, TRUE, '{7}');"
              .format(session, sync_id, 2, rec.cam2_id, rec.trac, dumps(erode(rec.cam2_env, precision)), utm_sector, project_list))
        index += 1

    print("UPDATE images i SET i.north_east_corner = ST_TRANSFORM(geo_ne_bb, 4326) WHERE i.camera='1' AND i.image=s.cam1_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.north_west_corner = ST_TRANSFORM(geo_nw_bb, 4326) WHERE i.camera='1' AND i.image=s.cam1_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.south_west_corner = ST_TRANSFORM(geo_sw_bb, 4326) WHERE i.camera='1' AND i.image=s.cam1_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.south_east_corner = ST_TRANSFORM(geo_se_bb, 4326) WHERE i.camera='1' AND i.image=s.cam1_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.envelope = ST_TRANSFORM(geo_rc_sb, 4326) WHERE i.camera='1' AND i.image=s.cam1_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))

    print("UPDATE images i SET i.north_east_corner = ST_TRANSFORM(geo_ne_sb, 4326) WHERE i.camera='2' AND i.image=s.cam2_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.north_west_corner = ST_TRANSFORM(geo_nw_sb, 4326) WHERE i.camera='2' AND i.image=s.cam2_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.south_west_corner = ST_TRANSFORM(geo_sw_sb, 4326) WHERE i.camera='2' AND i.image=s.cam2_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.south_east_corner = ST_TRANSFORM(geo_se_sb, 4326) WHERE i.camera='2' AND i.image=s.cam2_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
    print("UPDATE images i SET i.envelope = ST_TRANSFORM(geo_rc_bb, 4326) WHERE i.camera='2' AND i.image=s.cam2_id "
          "AND s.session='{0}' AND i.session='{0}';".format(session))
